#!/usr/bin/python3
# vim: sw=4:ts=4:et

from __future__ import print_function
import subprocess
import glob
import sys
import os
import re

import configparser

CONFIG_DEFAULTS = """
[notevim]

; mode can be "neovim" or "gvim".
mode         = gvim

; the session name is used to identify the gvim instance used for notevim.
; You may change it if you want, but you probably shouldn't set it to "GVIM"
; because that would be the default, and thus we could not identify our
; instance correctly anymore.
session_name = NOTEVIM

; The directory where the notes will be managed. You can use shell variables
; in this directory, which will be expanded (so you can use $HOME, for example)
notes_dir    = $HOME/notes

[gvim]
; Currently no specific options for gvim

; you may optionally point the executable to something else... 
executable = /usr/bin/gvim

[neovim]

; terminal: You can use the placeholders %TITLE to set the title
; of the terminal, which will be set to the session_name (see above).
; You MUST put in the placeholder %CMD so we know how to run neovim
; within the terminal.
terminal = sakura -t %TITLE -e %CMD

; you may optionally point the executable to something else... 
executable = /usr/bin/nvim


; The socket which will be used to communicate with neovim. You can use shell
; variables here, which will be expanded (so you can use $USER, for example)
socket   = /tmp/neovim-notevim-$USER

; Any uppercase variable in this section will be set in the environment
; before launching neovim. Useful for color / cursor configuration etc.
NVIM_TUI_ENABLE_TRUE_COLOR = 1

"""


NOTEVIM            = sys.argv[0]
CONFIG             = configparser.RawConfigParser()
CONFIG.optionxform = str


def cmd_usage():
    usage_text = (
        "Dave's note vim loader\n"
        "Usage:\n"
        "   notevim <filename>  - open file in note directory\n"
        "   notevim --openbox   - Openbox pipe menu with the files in the note dir\n"
        "   notevim --dmenu     - Show dmenu as a selector for the files\n"
        "   notevim --rofi      - Show rofi as a selector for the files\n"
        "   notevim --list      - Normal list of the files in the note dir\n"
        "   notevim             - Without any parameters, shows this help text\n"
        "The note directory is %s\n" % CONFIG.get('notevim', 'notes_dir'))
    print(usage_text)
    sys.exit(0)

def list_files():
    yield '*'
    notes_dir = os.path.expandvars(CONFIG.get('notevim', 'notes_dir'))
    for name in glob.glob(os.path.join(notes_dir, '**'), recursive=True):
        yield name.replace(notes_dir, '')

def cmd_list():
    for name in list_files():
        print(name)

def cmd_list_openbox():
    prelude = (
        '<openbox_pipe_menu>\n'
        '<item label="(New/None)">\n'
        '<action name="Execute">\n'
        '    <execute>\n'
        '        %s *\n'
        '    </execute>\n'
        '</action>\n'
        '</item>\n'
    )
    print(prelude % NOTEVIM)

    for name in list_files():
        entry = (
            '<item label="_%s">\n'
            '<action name="Execute">\n'
            '    <execute>\n'
            '        %s %s\n'
            '    </execute>\n'
            '</action>\n'
            '</item>\n'
        )
        print (entry % (name, NOTEVIM, name))

    print('</openbox_pipe_menu>\n')

def cmd_menu(menutool):
    commandlines = {
        'rofi':  ['rofi', '-dmenu', '-p', 'Open Note', '-i'],
        'dmenu': ['dmenu', '-i', '-p', 'Open Note:']
    }
    names_list = "\n".join(sorted(list_files())) + "\n"
    dm = subprocess.Popen(
        commandlines[menutool],
        stdin =subprocess.PIPE,
        stdout=subprocess.PIPE
    )
    stdout, stderr = dm.communicate(names_list.encode('utf-8'))

    stdout = stdout.decode('utf-8')
    return stdout.strip()


def cmd_open(filename):

    os.chdir(os.path.expandvars(CONFIG.get('notevim', 'notes_dir')))

    if filename == '':
        print("No filename given, probably menu aborted.")

    elif CONFIG.get('notevim', 'mode') == 'neovim':
        cmd_open_neovim(filename)

    elif CONFIG.get('notevim', 'mode') == 'kakoune':
        cmd_open_kakoune(filename)

    elif CONFIG.get('notevim', 'mode') == 'gvim':
        cmd_open_gvim(filename)

    else:
        print("Uh... invalid setting detected: Section [notevim], value 'mode' should")
        print("be either 'kakoune', 'neovim' or 'gvim'. Got '%s' instead..." % CONFIG.get('notevim', 'mode'))
        sys.exit(1)



def fetch_window():
    windows = subprocess.check_output(['wmctrl', '-l']).decode('utf-8').split("\n")
    
    session_name = CONFIG.get('notevim', 'session_name')

    session_windows = [win.split(" ")[0] for win in windows if session_name in win]

    if len(session_windows):
        subprocess.check_call(['wmctrl', '-i', '-R', session_windows[0]])


def generate_cmdline(params, filename):
    mode = CONFIG.get('notevim', 'mode')
    for param in params:
        if param == '%CMD':
            yield os.path.expandvars(CONFIG.get(mode, 'executable'))
            if filename[-1] != '*':
                yield filename

        elif param == '%TITLE':
            yield CONFIG.get('notevim', 'session_name')

        else:
            yield param

def cmd_open_neovim(filename):
    # import here so we don't crash in gvim mode if neovim
    # module is not present on the system
    import neovim

    nvim      = os.path.expandvars(CONFIG.get('neovim', 'executable'))
    socket    = os.path.expandvars('/tmp/neovim-notevim-$USER')

    full_path = os.path.join(os.path.expandvars(CONFIG.get('notevim', 'notes_dir')), filename)


    if os.path.exists(socket):
        try:
            client = neovim.attach('socket', path=socket)
            # try to communicate
            list(client.tabpages)

            fetch_window()

        except Exception as e:
            # Socket not writable, prolly leftover socket file..
            os.unlink(socket)
            return cmd_open_neovim(filename)

        if filename == '*':
            client.command(':tabnew')

        else:

            found = nvim_activate_if_possible(client, full_path)
            if not found:
                client.command(':tabnew')
                client.command(':edit %s' % full_path)

            ## workaround for airline update problem - TODO: really needed?
            #client.command(':edit!')


    else:

        expand_env('neovim')
        os.environ['NVIM_LISTEN_ADDRESS'] = socket

        cmd = list(generate_cmdline(re.split(r"\s+", CONFIG.get('neovim', 'terminal').strip()) + ['--listen', socket ], full_path))
        #print(cmd)
        subprocess.call(cmd, cwd=CONFIG.get('notevim', 'notes_dir'), env=os.environ)

def cmd_open_kakoune(filename):
    full_path = os.path.join(os.path.expandvars(CONFIG.get('notevim', 'notes_dir')), filename)

    sessions = subprocess.check_output(['/usr/bin/kak', '-l'])
    if b'notevim' in sessions.split(b"\n"):
        # we have a session running
        fetch_window()

        # tell running session to open our file, instead of starting a new editor

        if filename == '*':
            # special case, "open new file"
            command = "eval -client client0 'edit -scratch'; quit"
        else:
            command = "eval -client client0 'edit %s'; quit" % full_path
        tell_them = [
            '/usr/bin/kak',
            '-c', 'notevim',
            '-ui', 'json',
            '-e', command
        ]
        subprocess.call(tell_them)
        return

    expand_env('kakoune')
    cmd = list(generate_cmdline(re.split(r"\s+", CONFIG.get('kakoune', 'terminal').strip()) + ['-s', 'notevim'], full_path))
    subprocess.call(cmd, cwd=CONFIG.get('notevim', 'notes_dir'), env=os.environ)

def nvim_activate_if_possible(client, filename):
    for tabid, tab in enumerate(client.tabpages):
        for (winid, win) in enumerate(tab.windows):
            buf = win.buffer
            if buf.name == filename:
                # found - activate tab and return
                #print("Found: tabid=%d, winid=%d, bufname=%s" % (tabid, winid, buf.name))
                client.command(':tabn %d' % (tabid+1))
                return True

    # Reached this line, so we don't have thsi file open yet
    return False

def expand_env(section):
    for name, value in CONFIG.items(section):
        if name.upper() == name:
            os.environ[name] = value


def cmd_open_gvim(filename):
    gvim = os.path.expandvars(CONFIG.get('gvim', 'executable'))
    vim_servers = subprocess.check_output([gvim, '--serverlist']).decode('utf-8').split("\n")

    session_name = CONFIG.get('notevim', 'session_name')
    if session_name in vim_servers:

        if filename == '*':
            subprocess.call([
                gvim,
                '--servername',
                session_name,
                '--remote-send',
                '<esc>:tabnew<cr>'
                ])
        else:
            subprocess.call([
                gvim,
                '--servername',
                session_name,
                '--remote-tab',
                filename
            ])

        fetch_window()
    else:

        expand_env('gvim')

        cmd = [gvim, '--servername', session_name]

        if filename != '*':
            cmd.append(filename)

        subprocess.call(cmd)


if __name__ == '__main__':
    config_file = os.path.expandvars("$HOME/.notevim")
    
    parsed_files = CONFIG.read(config_file)
    if len(parsed_files) == 0:
        with open(config_file, 'w') as cfh:
            cfh.write(CONFIG_DEFAULTS)
        print("No config file found in %s, so I've created one for you." % config_file)
        print("Please review the file and change it if needed.")
        sys.exit()

    if len(sys.argv) < 2:
        cmd_usage()



    cmd = sys.argv[1]

    if cmd == '--list':
        cmd_list()

    elif cmd == '--openbox':
        cmd_list_openbox()

    elif cmd in ('--dmenu', '--rofi'):
        filename = cmd_menu(cmd[2:])
        cmd_open(filename)

    else:
        cmd_open(cmd)

